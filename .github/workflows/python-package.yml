# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [master]
    paths:
      - ".github/**"
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
    tags: ["*"]
  pull_request:
    branches: [master]
    paths:
      - ".github/**"
      - "src/**"
      - "tests/**"
      - "pyproject.toml"

jobs:
  get-version-pep440:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get PEP-440 style version
        id: get-version
        run: |
          PEP440_VERSION=""
          VERSION_PREFIX="v"
          BRANCH_OR_TAG="$(echo ${{ github.event.ref }} | cut -d / -f 3)"
          if [[ "${BRANCH_OR_TAG}" =~ ^v?(([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*(\.?(a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?)$ ]]
          then
            PEP440_VERSION="${BRANCH_OR_TAG#$VERSION_PREFIX}"
          fi
          echo "version=${PEP440_VERSION}" | tee -a $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: Install project
        run: uv sync --no-dev --group test --group typed
      - name: Cache of Ruff and MyPY
        uses: actions/cache@v4
        with:
          path: |
            .ruff_cache
            .mypy_cache
          key: cache-mypy-ruff
      - name: Lint check with ruff
        uses: astral-sh/ruff-action@v3
      - name: Static type check with mypy
        run: uv run --no-dev mypy
      - name: Unit test
        run: |
          uv run --no-dev coverage run -m unittest -fcv
          uv run --no-dev coverage report -m
          uv run --no-dev coverage xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: [get-version-pep440, test]
    if: needs.get-version-pep440.outputs.version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build
        run: uv build
      - name: Publish
        run: uv publish --token ${{ secrets.PYPI_API_TOKEN }}
